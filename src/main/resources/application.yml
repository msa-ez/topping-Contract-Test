server:
  port: 8080

spring:
  application:
    name: {{nameCamelCase}}

## 주문은 product 정보가 필요하다.
## checkStock 를 true 로 준다면, product 서비스가 죽어있을때는 주문이 안된다.
checkStock: true
---
spring:
  profiles: default
  cloud:
    stream:
      kafka:
        binder:
          brokers: localhost:9092
        streams:
          binder:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: {{#aggregates}}{{namePlural}}{{/aggregates}}
          destination: eventTopic
          contentType: application/json
        event-out:
          destination: eventTopic
          contentType: application/json
  jpa:
    properties:
      hibernate:
        show_sql: true
        format_sql: true
logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE
#logging:
#  level:
#    org.hibernate.type: trace
#    org.springframework.cloud: debug

{{#checkCommandRelation relationCommandInfo}}
api:
  url: 
    {{#setApiUrl relationCommandInfo true}}{{/setApiUrl}}
{{/checkCommandRelation}}

server:
  port: {{portGenerated}}
---
spring:
  profiles: docker
#  sleuth:
#    sampler:
#      probability: 1
#    web:
#      skipPattern: (^cleanup.*|.+favicon.*)
  cloud:
    stream:
      kafka:
        binder:
          brokers: my-kafka.kafka.svc.cluster.local:9092
        streams:
          binder:
            configuration:
              default:
                key:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
                value:
                  serde: org.apache.kafka.common.serialization.Serdes$StringSerde
      bindings:
        event-in:
          group: {{#aggregates}}{{namePlural}}{{/aggregates}}
          destination: eventTopicDocker
          contentType: application/json
        event-out:
          destination: eventTopicDocker
          contentType: application/json
api:
  url: 
    {{#if relationCommandInfo}}{{#relationCommandInfo}}{{#if targetAggregate}}{{targetAggregate.aggregate.nameCamelCase}}{{else}}{{commandValue.aggregate.nameCamelCase}}{{/if}}{{/relationCommandInfo}}{{else}}{{#attached "Event" this}}{{#if outgoingRelations}}{{#outgoingRelations}}{{#target}}{{#aggregateList}}{{nameCamelCase}}{{/aggregateList}}{{/target}}{{/outgoingRelations}}{{else}}{{boundedContext.nameCamelCase}}{{/if}}{{/attached}}{{/if}}: http://localhost:8080

<function>
window.$HandleBars.registerHelper('setApiUrl', function (relationCommandInfo, isPortGen) {
  var text = "";

  relationCommandInfo.forEach(function(item) {
    if(!text.includes(item.commandValue.boundedContext.name)) {
      if(isPortGen) {
        text += item.commandValue.boundedContext.name + ": localhost:" + item.commandValue.boundedContext.portGenerated + " \n    ";
      } else {
        text += item.commandValue.boundedContext.name + ": " +item.commandValue.boundedContext.name +":8080 \n    ";
      }
    }
  })
  
  return text;
});
</function>